/**
 * Tokenization (aka Lexing)
 *
 * It breaks an input source code string into tokens.
 * Afterwards, these tokens will be given to the parser.
 */
type TokenType = "COMMENT" | "CONST" | "RETURN" | "TYPE_NUMBER" | "TYPE_STRING" | "TYPE_BOOLEAN" | "TYPE_ARRAY" | "TYPE_VOID" | "TYPE_INT" | "TYPE_FLOAT" | "TYPE_BOOL" | "TYPE_UNIT" | "ARROW" | "TERNARY" | "COLON" | "EQUAL" | "PIPE" | "LESS_THAN" | "GREATER_THAN" | "MULTIPLY" | "PLUS" | "LEFT_PAREN" | "RIGHT_PAREN" | "LEFT_CURLY" | "RIGHT_CURLY" | "LEFT_BRACKET" | "RIGHT_BRACKET" | "COMMA" | "SEMICOLON" | "BOOLEAN" | "IDENTIFIER" | "NUMBER" | "STRING" | "EOF";
interface Token {
    type: TokenType;
    value?: string;
    position: number;
}
/**
 * Tokenize source code into a stream of tokens
 *
 * @param sourceCode - The raw source code to tokenize
 * @returns An array of Token objects
 */
export declare function tokenize(sourceCode: string): Token[];
export {};
//# sourceMappingURL=tokenize.d.ts.map
"use strict";
// test-utils.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.FAIL = exports.PASS = void 0;
exports.assert = assert;
exports.assertEqual = assertEqual;
exports.test = test;
exports.summarize = summarize;
const failedTests = [];
exports.PASS = "✅";
exports.FAIL = "❌";
function assert(condition, message = "Assertion failed") {
    if (!condition) {
        throw new Error(message);
    }
}
function assertEqual(actual, expected, message = "Values are not equal") {
    if (typeof expected === "object" && expected !== null) {
        const actualStr = JSON.stringify(actual);
        const expectedStr = JSON.stringify(expected);
        if (actualStr !== expectedStr) {
            throw new Error(`${message}\nExpected: ${expectedStr}\nActual: ${actualStr}`);
        }
    }
    else if (actual !== expected) {
        throw new Error(`${message}\nExpected: ${expected}\nActual: ${actual}`);
    }
}
let hasPrintedStartMessage = false;
function test(name, testFn) {
    if (!hasPrintedStartMessage) {
        console.log("Running tests...");
        hasPrintedStartMessage = true;
    }
    try {
        testFn();
        console.log(`${exports.PASS} ${name}`);
        return true;
    }
    catch (error) {
        console.log(`${exports.FAIL} ${name}`);
        if (error instanceof Error) {
            console.error(`   Error: ${error.message}`);
        }
        else {
            console.error(`   Unknown error: ${error}`);
        }
        failedTests.push(name);
        return false;
    }
}
function summarize() {
    console.log("\n=== Test Summary ===\n");
    if (failedTests.length === 0) {
        console.log(`${exports.PASS} All tests passed!`);
        return true;
    }
    else {
        console.log(`${exports.FAIL} Some tests failed:`);
        failedTests.forEach((test) => {
            console.log(`  - ${test}`);
        });
        process.exitCode = 1;
        return false;
    }
}
//# sourceMappingURL=test.js.map
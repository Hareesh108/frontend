/**
 * Parsing (aka Syntax Analysis)
 *
 * This module takes a stream of tokens (from the Tokenize step) and builds a parse tree
 * (aka Abstract Syntax Tree, or AST for short). The parse tree represents the structure
 *  of the code.
 */
type Token = {
    type: string;
    value?: string;
    position?: number;
};
type ASTNode = {
    type: 'ReturnStatement';
    argument: ASTNode | null;
} | {
    type: 'ConstDeclaration';
    id: ASTNode;
    init: ASTNode;
    typeAnnotation: ASTNode | null;
} | {
    type: 'Identifier';
    name: string;
} | {
    type: 'StringLiteral';
    value: string;
} | {
    type: 'NumericLiteral';
    value: number;
} | {
    type: 'BooleanLiteral';
    value: boolean;
} | {
    type: 'BinaryExpression';
    left: ASTNode;
    operator: string;
    right: ASTNode;
} | {
    type: 'ConditionalExpression';
    test: ASTNode;
    consequent: ASTNode;
    alternate: ASTNode;
} | {
    type: 'ArrayLiteral';
    elements: ASTNode[];
    position?: number;
} | {
    type: 'MemberExpression';
    object: ASTNode;
    index: ASTNode;
    position?: number;
} | {
    type: 'CallExpression';
    callee: ASTNode;
    arguments: ASTNode[];
} | {
    type: 'ArrowFunctionExpression';
    params: ASTNode[];
    body: ASTNode;
    returnType: ASTNode | null;
} | {
    type: 'BlockStatement';
    body: ASTNode[];
} | {
    type: 'TypeAnnotation';
    valueType: string;
} | {
    type: 'ArrayTypeAnnotation';
    elementType: ASTNode;
} | {
    type: 'FunctionTypeAnnotation';
    paramTypes: {
        name: string;
        typeAnnotation: ASTNode;
    }[];
    returnType: ASTNode;
};
/**
 * Parse tokens into a Parse Tree
 *
 * @param {Token[]} tokenList - A list of tokens from the tokenizer
 * @returns {ASTNode[]} - The root node of the Parse Tree
 */
declare function parse(tokenList: Token[]): ASTNode[];
/**
 * Tokenize and then parse.
 *
 * @param {string} sourceCode - The source code to compile
 * @returns {ASTNode[]} - Statement parse tree nodes
 */
declare function compile(sourceCode: string): ASTNode[];
export { parse, compile, ASTNode, Token };
//# sourceMappingURL=parse.d.ts.map